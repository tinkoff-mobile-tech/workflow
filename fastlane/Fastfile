lane :release do |options|
  # Checking bump type
  bump_type = resolve_bump_type(options)

  # Checking that everything is alright
  check
  podspec_names = sorted_podspecs(podspecs:Dir.glob('*.podspec', base: '..'))
  # Bumping podspec version
  for podspec_name in podspec_names
    version = version_bump_podspec(path: podspec_name, bump_type: bump_type)

    bump_podspec_dependency(podspecs: podspec_names, name: podspec_name.delete_suffix('.podspec'), version: version)
  end

  add_files = extend_bump_version(version: version)

  text = read_changelog
  changelog = File.open('new_changes.txt', "w")
  changelog.puts(text)
  changelog.close

  version_file = File.open('version.txt', "w")
  version_file.puts(version)
  version_file.close

  # Stamping changelog
  stamp_changelog(section_identifier: version)

  # Creating release commit and tag
  git_commit(path: ["CHANGELOG.md"] + podspec_names + add_files, message: "Release #{version}", skip_git_hooks: true)
  add_git_tag(tag: version)

  # Pushing to remote repo
  push_to_git_remote(tags: true)

  # Pushing podspec to Cocoapods repo
  for podspec_name in podspec_names
    push_podspec(podspec_name)
  end
end

lane :extend_bump_version do |options|
  []
end

lane :check do
  # Linting ruby files
  lint_fastfile

  # Linting podspecs
  lint_all_podspecs

  # Buidling Swift package
  build_swift_package if File.exist?('Package.swit')
end

lane :lint_all_podspecs do 
  Dir.chdir("..") do
    sh("bundle exec pod repo update")
  end
  all_pods_dependencies = scan_local_podspec_dependencies

  Dir.glob('*.podspec', base: '..').each do |podspec_path|
    podspec_name = File.basename(podspec_path, '.podspec')
    pod_dependencies = all_pods_dependencies[podspec_name]
    include_podspecs = nil
    # We need include only necessary local podspecs, not all!
    include_podspecs = "{#{pod_dependencies.sort.join(',')}}.podspec" unless pod_dependencies.empty?
    
    pod_lib_lint(
      podspec: podspec_path,
      include_podspecs: include_podspecs,
      allow_warnings: true,
      skip_tests: true,
      fail_fast: true
    )
  end
end

lane :build_swift_package do
  project_name = ENV['XCODEPROJ_PATH']
  scheme_name = ENV['SCHEME_NAME']
  config_file_name = "Config.xcconfig"

  # Creating configuration file
  sh("echo SWIFT_ACTIVE_COMPILATION_CONDITIONS=''> #{config_file_name}")

  # Generating xcode project
  sh("swift package generate-xcodeproj --xcconfig-overrides #{config_file_name}")

  # Building generated xcode project
  sh("xcodebuild clean build -project ../#{project_name} -sdk iphoneos -scheme '#{scheme_name}'")

  # Cleaning up
  sh("rm -f #{config_file_name}")
  sh("rm -rf ../#{project_name}")
end

lane :lint_fastfile do
  Dir.chdir("..") do
    error_callback = lambda do |result|
      UI.user_error!("rubocop execution failed: #{result}")
    end

    if(File.exist?('.rubocop.yml'))
        sh('bundle exec rubocop -c .rubocop.yml', error_callback: error_callback)
    end
  end
end

def push_podspec(podspec_name)
  tries = 6
  for i in 1..tries
    begin
      sh("bundle exec pod repo update")
      pod_push(
        use_bundle_exec: true,
        path: podspec_name,
        allow_warnings: true,
        skip_import_validation: true,
        skip_tests: true,
        synchronous: true
      )
      break
    rescue StandardError => error
      if i == tries
        raise
      end
      delay = 3**i
      puts "retry pod_push after #{delay}"
      sleep(delay)
    end
  end
end

def resolve_bump_type(options)
  valid_bump_types = ['patch', 'minor', 'major']
  bump_type = valid_bump_types.include?(options[:type]) ? options[:type] : nil

  UI.abort_with_message!("Bump type is not specified or incorrect! You can use `type: #{valid_bump_types.join('/')}` to specify it.") unless bump_type

  return bump_type
end
